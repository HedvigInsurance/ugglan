# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
    lane :load_api do
      if is_ci
        app_store_connect_api_key(
            key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
            issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
            key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
            duration: 1200,
            in_house: false
        )
      end
    end
    
    lane :setup do
        load_api
        sh("cd ..; tuist up")
        sh("cd ..; tuist generate")
        ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "120"
    end

    lane :provision do
      register_devices(
        devices_file: "./devices.txt"
      )

      match(
        type: "appstore",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "appstore",
        platform: "catalyst",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "adhoc",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "development",
        platform: "catalyst",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "adhoc",
        app_identifier: "com.hedvig.test.app",
        force: true
      )

      match(
        type: "development",
        platform: "catalyst",
        app_identifier: "com.hedvig.test.app",
        force: true
      )

      match(
        type: "adhoc",
        app_identifier: "com.hedvig.example.*",
        force: true
      )

      match(
        type: "adhoc",
        platform: "catalyst",
        app_identifier: "com.hedvig.example.*",
        force: true
      )

      match(
        type: "development",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "development",
        platform: "catalyst",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "development",
        app_identifier: "com.hedvig.test.app",
        force: true
      )

      match(
        type: "development",
        platform: "catalyst",
        app_identifier: "com.hedvig.test.app",
        force: true
      )

      match(
        type: "development",
        app_identifier: "com.hedvig.example.*",
        force: true
      )

      match(
        type: "development",
        platform: "catalyst",
        app_identifier: "com.hedvig.example.*",
        force: true
      )
    end

    lane :upload_dsyms do
        download_dsyms
        sentry_upload_dsym
        clean_build_artifacts
    end
    
    lane :production_upload do |options|
        setup
        
        app_identifier = "com.hedvig.app"
        
        match(
            type: "appstore",
            app_identifier: app_identifier,
            readonly: is_ci,
            git_url: is_ci ? "https://hedvig-app-bot:#{ENV['MATCH_GITHUB_TOKEN']}@github.com/HedvigInsurance/ugglan-certificates.git" : nil,
        )
        
        increment_build_number(
            build_number: latest_testflight_build_number(app_identifier: app_identifier) + 1,
            xcodeproj: "Projects/App/Ugglan.xcodeproj"
        )
        
        increment_version_number(
            version_number: options[:version_number],
            xcodeproj: "Projects/App/Ugglan.xcodeproj"
        )
        
        update_project_provisioning(
            xcodeproj: "Projects/App/Ugglan.xcodeproj",
            profile: ENV["sigh_#{app_identifier}_appstore_profile-path"],
            target_filter: "Hedvig",
            build_configuration: "Release"
        )
        
        build_app(
            workspace: "Ugglan.xcworkspace",
            configuration: "Release",
            scheme: "Hedvig",
            catalyst_platform: "ios",
            output_directory: "fastlane/build_output",
            codesigning_identity: "Apple Distribution: Hedvig AB (AW656G5PFM)",
            export_options: {
                method: "appstore",
                iCloudContainerEnvironment: "Production",
                provisioningProfiles: ENV['MATCH_PROVISIONING_PROFILE_MAPPING']
            }
        )
        
        upload_to_app_store(
            force: true,
            submit_for_review: false,
            skip_screenshots: true,
            skip_metadata: true,
            precheck_include_in_app_purchases: false
        )
    end
    
    private_lane :send_slack_message do |options|
        require 'slack-notifier'
        
        notifier = Slack::Notifier.new options[:url], username: "iOS Bot"
        
        notifier.post(blocks: options[:blocks])
    end
    
    lane :build do |options|
        setup
        
        if is_ci
            if File.exist? File.expand_path("~/Library/Keychains/CI-db")
                unlock_keychain(
                    path: "CI",
                    password: ENV["MATCH_PASSWORD"]
                )
            else
                create_keychain(
                    name: "CI",
                    password: ENV["MATCH_PASSWORD"],
                    unlock: true,
                    timeout: false,
                    lock_when_sleeps: false
                )
            end
        end

        app_identifier = options[:identifier] || 'com.hedvig.example.*'
        scheme = options[:scheme]
        project_path = options[:path]
        
        match(
            type: "adhoc",
            app_identifier: app_identifier,
            readonly: is_ci,
            git_url: is_ci ? "https://hedvig-app-bot:#{ENV['MATCH_GITHUB_TOKEN']}@github.com/HedvigInsurance/ugglan-certificates.git" : nil,
            keychain_name: is_ci ? 'CI' : nil,
            keychain_password: is_ci ? ENV["MATCH_PASSWORD"] : nil
        )

        if is_ci
            sh("security list-keychains -d user")
            sh("security default-keychain -d user")
            sh("security find-identity -v -p codesigning CI")
        end
                    
        update_project_provisioning(
            xcodeproj: project_path,
            profile: ENV["sigh_#{app_identifier}_adhoc_profile-path"],
            target_filter: scheme,
            build_configuration: "Release"
        )
                                
        build_app(
            workspace: "Ugglan.xcworkspace",
            configuration: "Release",
            scheme: scheme,
            output_directory: "fastlane/build_output",
            codesigning_identity: "Apple Distribution: Hedvig AB (AW656G5PFM)",
            include_bitcode: false,
            catalyst_platform: "ios",
            skip_package_dependencies_resolution: true,
            export_options: {
                compileBitcode: false,
                iCloudContainerEnvironment: "Production",
                method: "ad-hoc",
                provisioningProfiles: ENV['MATCH_PROVISIONING_PROFILE_MAPPING'],
                thinning: "<none>"
            }
        )
    end

    lane :slack_message do
        is_pr = git_branch != ""

        app_results = []

        Dir.glob("build_output/*.ipa") do |path|
            require 'securerandom'

            scheme = File.basename(path, ".*")
            absolute_path = File.expand_path(path)
                
            aws_s3(
                access_key: ENV['S3_ACCESS_KEY'],
                secret_access_key: ENV['S3_SECRET_ACCESS_KEY'],
                bucket: "hedvig-ios-builds",
                region: "eu-central-1",
                ipa: absolute_path,
                app_directory: "#{scheme}_#{SecureRandom.uuid}",
                path: 'v{CFBundleShortVersionString}_b{CFBundleVersion}/',
                upload_metadata: true,
            )
            
            app_results.append({
                url: lane_context[SharedValues::S3_HTML_OUTPUT_PATH],
                scheme: scheme
            })
        end
        
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "WorkspaceApps: ##{last_git_commit[:abbreviated_commit_hash]}",
                    "emoji": true
                }
            },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Branch*: #{is_pr ? git_branch : "master"}"
            }
          },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Message*: #{last_git_commit[:message]}"
            }
          },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Author*: #{last_git_commit[:author]}"
            }
          },
          {
            "type": "divider"
          },
          {
            "type": "actions",
            "elements": app_results.map { |app_result|
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": app_result[:scheme]
                    },
                    "url": app_result[:url],
                    "value": app_result[:scheme]
                }
            }
          },
          {
            "type": "divider"
          },
          !is_pr ? nil :
          {
            "type": "actions",
            "elements": [
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "Approve"
                    },
                    "style": "primary",
                    "value": "approve=#{ENV['GITHUB_PR_NUMBER']};git_commit=#{last_git_commit[:commit_hash]}"
                },
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "Request changes"
                    },
                    "style": "danger",
                    "value": "decline=#{ENV['GITHUB_PR_NUMBER']};git_commit=#{last_git_commit[:commit_hash]}"
                }
            ]
          },
          !is_pr ? nil : {
            "type": "divider"
          },
          !is_pr ? nil :
          {
            "type": "actions",
            "elements": [
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "Open Github PR"
                    },
                    "url": "https://www.github.com/HedvigInsurance/ugglan/pull/#{ENV['GITHUB_PR_NUMBER']}",
                    "value": "open_github"
                }
            ]
          },
          !is_pr ? nil :
          {
            "type": "divider"
          },
          !is_pr ? nil : {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "Request review from:"
            },
            "accessory": {
                "type": "users_select",
                "placeholder": {
                    "type": "plain_text",
                    "text": "Select a person",
                    "emoji": true
                }
            }
          },
        ].filter { |i| i != nil }
        
        send_slack_message(url: git_branch == "" ? ENV["SLACK_IOS_BUILDS_URL"] : ENV["SLACK_IOS_PR_BUILDS_URL"], blocks: blocks)
    end
    
    lane :workspace_tests do
        if !ENV["SKIP_SETUP"]
            setup
        end
        
        schemes = [
            "Ugglan",
            "hCore",
            "hCoreUI",
            "Forever",
            "Contracts",
            "Home"
        ]

        if ENV["SCHEME_FILTER"]
            schemes = schemes.filter { |scheme| scheme.include?(ENV["SCHEME_FILTER"]) }
        end
        
        def report(schemes)
            xchtmlreport(
                result_bundle_paths: schemes.map { |scheme| "fastlane/test_output/#{scheme}.xcresult" }.filter { |path| File.directory?(path) }
            )
        end
        
        device = "iPhone 11 Pro (14.5)"
        
        schemes.each { |scheme|
            begin
                if ENV["RECORD"] == "true"
                    scan(
                        workspace: "Ugglan.xcworkspace",
                        devices: [device],
                        scheme: scheme,
                        xcargs: "OTHER_SWIFT_FLAGS='$(inherited) -D RECORD'"
                    )
                else
                    scan(
                        workspace: "Ugglan.xcworkspace",
                        devices: [device],
                        scheme: scheme,
                        skip_package_dependencies_resolution: true
                    )
                end
            rescue => ex
                report(schemes)
                if ENV["RECORD"] != "true"
                    raise ex
                end
            end
        }
        
        report(schemes)
    end
end
