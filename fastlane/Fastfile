# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
    lane :load_api do
      if is_ci
        app_store_connect_api_key(
            key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
            issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
            key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
            duration: 1200,
            in_house: false
        )
      end
    end
    
    lane :setup do
        ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "120"
    end

    lane :provision do
      match(
        type: "appstore",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "adhoc",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "adhoc",
        app_identifier: "com.hedvig.test.app",
        force: true
      )

      match(
        type: "adhoc",
        app_identifier: "com.hedvig.example.*",
        force: true
      )

      match(
        type: "development",
        app_identifier: "com.hedvig.app",
        force: true
      )

      match(
        type: "development",
        app_identifier: "com.hedvig.test.app",
        force: true
      )

      match(
        type: "development",
        app_identifier: "com.hedvig.example.*",
        force: true
      )
    end

    lane :upload_dsyms do
        load_api
        download_dsyms
        lane_context[SharedValues::DSYM_PATHS].each do |file|
            sh("DATADOG_SITE=datadoghq.eu datadog-ci dsyms upload #{file}")
        end
        clean_build_artifacts
    end

    private_lane :setup_keychain do
        if is_ci
            if File.exist? File.expand_path("~/Library/Keychains/CI-db")
                delete_keychain(
                    name: "CI",
                )
            end

            create_keychain(
                name: "CI",
                password: ENV["MATCH_PASSWORD"],
                unlock: true,
                timeout: 0,
                lock_when_sleeps: false
            )

            unlock_keychain(
                path: "CI",
                password: ENV["MATCH_PASSWORD"]
            )
        end
    end

    private_lane :allow_keychain do
        if is_ci
            sh(
                command: "security default-keychain -d user",
                log: false
            )
            sh(
                command: "security list-keychains -d user",
                log: false
            )
            sh(
                command: "security find-identity -v -p codesigning CI",
                log: false
            )
            sh(
                command: "security set-key-partition-list -S apple-tool:,apple: -s -k #{ENV["MATCH_PASSWORD"]} ~/Library/Keychains/CI-db",
                log: false
            )
        end
    end
    
    lane :production_upload do |options|
        load_api
        setup
        
        app_identifier = "com.hedvig.app"

        setup_keychain
        
        match(
            type: "appstore",
            app_identifier: app_identifier,
            readonly: is_ci,
            git_url: is_ci ? "https://hedvig-app-bot:#{ENV['MATCH_GITHUB_TOKEN']}@github.com/HedvigInsurance/ugglan-certificates.git" : nil,
            keychain_name: is_ci ? 'CI' : nil,
            keychain_password: is_ci ? ENV["MATCH_PASSWORD"] : nil
        )

        allow_keychain
        
        increment_build_number(
            build_number: latest_testflight_build_number(app_identifier: app_identifier) + 1,
            xcodeproj: "Projects/App/Ugglan.xcodeproj"
        )
        
        increment_version_number(
            version_number: options[:version_number],
            xcodeproj: "Projects/App/Ugglan.xcodeproj"
        )
        
        update_project_provisioning(
            xcodeproj: "Projects/App/Ugglan.xcodeproj",
            profile: ENV["sigh_#{app_identifier}_appstore_profile-path"],
            certificate: is_ci ? "AppleIncRootCertificate.cer" : "",
            target_filter: "Hedvig",
            build_configuration: "Release"
        )
        
        build_app(
            workspace: "Ugglan.xcworkspace",
            configuration: "Release",
            scheme: "Hedvig",
            catalyst_platform: "ios",
            output_directory: "fastlane/build_output",
            codesigning_identity: "Apple Distribution: Hedvig AB (AW656G5PFM)",
            export_options: {
                method: "appstore",
                iCloudContainerEnvironment: "Production",
                provisioningProfiles: ENV['MATCH_PROVISIONING_PROFILE_MAPPING']
            }
        )
        
        upload_to_app_store(
            force: true,
            submit_for_review: false,
            skip_screenshots: true,
            skip_metadata: true,
            precheck_include_in_app_purchases: false
        )
    end
    
    private_lane :send_slack_message do |options|
        require 'slack-notifier'
        
        notifier = Slack::Notifier.new options[:url], username: "iOS Bot"
        
        notifier.post(blocks: options[:blocks])
    end

    lane :update_annotations do |options|
        if is_ci
            require "octokit"
            require 'openssl'
            require 'jwt'

            private_key = OpenSSL::PKey::RSA.new(ENV["HEDVIG_GITHUB_APP_PRIVATE_KEY"])

            payload = {
                iat: Time.now.to_i - 60,
                exp: Time.now.to_i + (10 * 60),
                iss: ENV["HEDVIG_GITHUB_APP_ID"].to_i
            }

            jwt = JWT.encode(payload, private_key, "RS256")

            application_client = Octokit::Client.new(
                :bearer_token => jwt
            )
            repo = ENV["GITHUB_REPOSITORY"]
            
            installation = application_client.find_repository_installation(repo)
            installation_token = application_client.create_installation_access_token(installation.id, accept: 'application/vnd.github.machine-man-preview+json')

            client = Octokit::Client.new(
                :access_token => installation_token.token
            )

            run_id = ENV["GITHUB_RUN_ID"]
            run_response = client.get("#{Octokit::Repository.path repo}/actions/runs/#{run_id}", {})

            check_run_response = client.create_check_run(repo, options[:name], run_response.head_sha, {
                status: "completed",
                conclusion: options[:conclusion],
                details_url: options[:details_url] || "https://www.hedvig.com"
            })

            options[:annotations].each_slice(50) { |annotations|
                client.update_check_run(repo, check_run_response.id, {
                    output: {
                        title: options[:title],
                        summary: options[:summary],
                        annotations: annotations
                    }
                })
            }
        end
    end

    private_lane :handle_build_result do |options|
        require "json"
            
        file_path = "../build/reports/errors.json"

        name = ENV["BUILD_NAME"]
        title = "#{ENV["BUILD_NAME"]}"
        summary = "Build succeeded without any remarks"
        conclusion = "success" 
        annotations = []

        if File.file?(file_path)
            file = File.open file_path
            errors = JSON.load file

            main_dir = File.expand_path("..", Dir.pwd)

            errors["compile_warnings"].each { |error|
                error_definition = error["file_path"].split(":")
                file = error_definition[0]

                if Find.find(main_dir).include?(file)
                    name = ENV["BUILD_NAME"]
                    summary = "There where some warnings"
                    conclusion = "neutral"
                    
                    annotations.append({
                        path: file.sub!(main_dir + "/", ""),
                        start_line: error_definition[1].to_i,
                        end_line: error_definition[1].to_i,
                        annotation_level: "warning",
                        title: "Swift Compiler Warning",
                        message: error["reason"]
                    })
                end
            }

            errors["compile_errors"].each { |error|
                error_definition = error["file_path"].split(":")
                file = error_definition[0]

                name = ENV["BUILD_NAME"]
                summary = "There where some errors"
                conclusion = "failure"

                if Find.find(main_dir).include?(file)
                    annotations.append({
                        path: file.sub!(main_dir + "/", ""),
                        start_line: error_definition[1].to_i,
                        end_line: error_definition[1].to_i,
                        annotation_level: "failure",
                        title: "Compilation error",
                        message: error["reason"]
                    })
                end
            }
        end

        scheme = options[:scheme]

        update_annotations(
            name: name,
            title: title,
            summary: summary,
            conclusion: conclusion,
            annotations: annotations
        )
    end

    private_lane :handle_xcresult_result do |options|
        require 'xcresult'
        require 'cgi'

        parser = XCResult::Parser.new(path: "test_output/#{options[:scheme]}.xcresult")

        annotations = []

        name = ""
        summary = ""
        conclusion = ""

        main_dir = File.expand_path("..", Dir.pwd)

        parser.actions_invocation_record.issues.warning_summaries.each { |issue|
            if issue.document_location_in_creating_workspace
                urlParts = issue.document_location_in_creating_workspace.url.sub!("file://", "").split("#")
                params = CGI::parse(urlParts[1])

                file = urlParts[0]

                if Find.find(main_dir).include?(file)
                    annotations.append({
                        path: file.sub!(main_dir + "/", ""),
                        start_line: params["StartingLineNumber"].first.to_i,
                        end_line: params["EndingLineNumber"].first.to_i,
                        annotation_level: "warning",
                        title: issue.issue_type,
                        message: issue.message
                    })
                end

                name = ENV["BUILD_NAME"]
                summary = "There where some warnings"
                conclusion = "neutral"
            end
        }
        
        parser.actions_invocation_record.issues.test_failure_summaries.each { |failure|
            urlParts = failure.document_location_in_creating_workspace.url.sub!("file://", "").split("#")
            params = CGI::parse(urlParts[1])

            file = urlParts[0]

            if Find.find(main_dir).include?(file)
                annotations.prepend({
                    path: file.sub!(main_dir + "/", ""),
                    start_line: params["StartingLineNumber"].first.to_i,
                    end_line: params["EndingLineNumber"].first.to_i,
                    annotation_level: "failure",
                    title: "Test error",
                    message: failure.message
                })
            end

            name = ENV["BUILD_NAME"]
            conclusion = "Some tests failed"
            conclusion = "failure"
        }

        aws_s3(
            access_key: ENV['S3_ACCESS_KEY'],
            secret_access_key: ENV['S3_SECRET_ACCESS_KEY'],
            bucket: "hedvig-ios-builds",
            region: "eu-central-1",
            folder: "fastlane/test_output",
            app_directory: "#{options[:scheme]}_#{SecureRandom.uuid}",
            upload_metadata: false
        )

        if !annotations.empty?
            update_annotations(
                name: name,
                title: "#{ENV["BUILD_NAME"]}",
                summary: summary,
                conclusion: conclusion,
                annotations: annotations,
                details_url: lane_context[SharedValues::S3_FOLDER_OUTPUT_PATH] + "/index.html"
            )
        else
            update_annotations(
                name: ENV["BUILD_NAME"],
                title: "#{ENV["BUILD_NAME"]}",
                summary: "Tests passed.",
                conclusion: "success",
                annotations: annotations,
                details_url: lane_context[SharedValues::S3_FOLDER_OUTPUT_PATH] + "/index.html"
            )
        end
    end
    
    lane :build do |options|
        setup

        setup_keychain

        app_identifier = options[:identifier] || 'com.hedvig.example.*'
        scheme = options[:scheme]
        project_path = options[:path]
        
        match(
            type: "adhoc",
            app_identifier: app_identifier,
            readonly: is_ci,
            git_url: is_ci ? "https://hedvig-app-bot:#{ENV['MATCH_GITHUB_TOKEN']}@github.com/HedvigInsurance/ugglan-certificates.git" : nil,
            keychain_name: is_ci ? 'CI' : nil,
            keychain_password: is_ci ? ENV["MATCH_PASSWORD"] : nil
        )

        allow_keychain
                    
        update_project_provisioning(
            xcodeproj: project_path,
            profile: ENV["sigh_#{app_identifier}_adhoc_profile-path"],
            certificate: is_ci ? "AppleIncRootCertificate.cer" : "",
            target_filter: scheme,
            build_configuration: "Release"
        )

        begin
            build_app(
                workspace: "Ugglan.xcworkspace",
                configuration: "Release",
                scheme: scheme,
                output_directory: "fastlane/build_output",
                codesigning_identity: "Apple Distribution: Hedvig AB (AW656G5PFM)",
                include_bitcode: false,
                catalyst_platform: "ios",
                skip_package_dependencies_resolution: false,
                xcpretty_formatter: ENV["GEM_HOME"] + "/gems/xcpretty-json-formatter-0.1.1/lib/json_formatter.rb",
                archive_path: is_ci ? "build" : nil,
                export_options: {
                    compileBitcode: false,
                    iCloudContainerEnvironment: "Production",
                    method: "ad-hoc",
                    provisioningProfiles: ENV['MATCH_PROVISIONING_PROFILE_MAPPING'],
                    thinning: "<none>"
                }
            )
            handle_build_result(scheme: scheme)
        rescue => ex
            handle_build_result
            raise ex
        end
    end

    lane :slack_message do
        is_pr = git_branch != ""

        app_results = []

        Dir.glob("build_output/*.ipa") do |path|
            require 'securerandom'

            scheme = File.basename(path, ".*")
            absolute_path = File.expand_path(path)
                
            aws_s3(
                access_key: ENV['S3_ACCESS_KEY'],
                secret_access_key: ENV['S3_SECRET_ACCESS_KEY'],
                bucket: "hedvig-ios-builds",
                region: "eu-central-1",
                ipa: absolute_path + "/" + scheme + ".ipa",
                app_directory: "#{scheme}_#{SecureRandom.uuid}",
                path: 'v{CFBundleShortVersionString}_b{CFBundleVersion}/',
                upload_metadata: true,
            )
            
            app_results.append({
                url: lane_context[SharedValues::S3_HTML_OUTPUT_PATH],
                scheme: scheme
            })
        end
        
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "WorkspaceApps: ##{last_git_commit[:abbreviated_commit_hash]}",
                    "emoji": true
                }
            },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Branch*: #{is_pr ? git_branch : "master"}"
            }
          },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Message*: #{last_git_commit[:message]}"
            }
          },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Author*: #{last_git_commit[:author]}"
            }
          },
          {
            "type": "divider"
          },
          {
            "type": "actions",
            "elements": app_results.map { |app_result|
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": app_result[:scheme]
                    },
                    "url": app_result[:url],
                    "value": app_result[:scheme]
                }
            }
          },
          {
            "type": "divider"
          },
          !is_pr ? nil :
          {
            "type": "actions",
            "elements": [
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "Approve"
                    },
                    "style": "primary",
                    "value": "approve=#{ENV['GITHUB_PR_NUMBER']};git_commit=#{last_git_commit[:commit_hash]}"
                },
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "Request changes"
                    },
                    "style": "danger",
                    "value": "decline=#{ENV['GITHUB_PR_NUMBER']};git_commit=#{last_git_commit[:commit_hash]}"
                }
            ]
          },
          !is_pr ? nil : {
            "type": "divider"
          },
          !is_pr ? nil :
          {
            "type": "actions",
            "elements": [
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "Open Github PR"
                    },
                    "url": "https://www.github.com/HedvigInsurance/ugglan/pull/#{ENV['GITHUB_PR_NUMBER']}",
                    "value": "open_github"
                }
            ]
          },
          !is_pr ? nil :
          {
            "type": "divider"
          },
          !is_pr ? nil : {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "Request review from:"
            },
            "accessory": {
                "type": "users_select",
                "placeholder": {
                    "type": "plain_text",
                    "text": "Select a person",
                    "emoji": true
                }
            }
          },
        ].filter { |i| i != nil }
        
        send_slack_message(url: git_branch == "" ? ENV["SLACK_IOS_BUILDS_URL"] : ENV["SLACK_IOS_PR_BUILDS_URL"], blocks: blocks)
    end

    lane :test do |options|
        setup
        scheme = options[:scheme]
        
        device = "iPhone 12 Pro (15.0)"


        config_path = File.join(File.expand_path("~"), "Library", "Preferences", "com.apple.iphonesimulator.plist")

        UI.message "Patching '#{config_path}' to scale simulator to 100%"

        FastlaneCore::Simulator.all.each do |simulator|
            simulator_name = simulator.name.tr("\s", "-")
            key = "SimulatorWindowLastScale-com.apple.CoreSimulator.SimDeviceType.#{simulator_name}"

            command = "defaults write '#{config_path}' '#{key}' '1.0'"
            puts command
            `#{command}`
        end

        begin
            scan(
                workspace: "Ugglan.xcworkspace",
                devices: [device],
                scheme: scheme,
                formatter: ENV["GEM_HOME"] + "/gems/xcpretty-json-formatter-0.1.1/lib/json_formatter.rb",
                output_style: "rspec",
                skip_package_dependencies_resolution: true,
                number_of_retries: 5
            )
            xchtmlreport(
                binary_path: "/opt/homebrew/bin/xchtmlreport",
                result_bundle_paths: ["fastlane/test_output/#{scheme}.xcresult"],
                enable_junit: true
            )
            handle_xcresult_result(scheme: scheme)
        rescue => ex
            xchtmlreport(
                binary_path: "/opt/homebrew/bin/xchtmlreport",
                result_bundle_paths: ["fastlane/test_output/#{scheme}.xcresult"],
                enable_junit: true
            )
            handle_xcresult_result(scheme: scheme)
            raise ex
        end
    end
    
    lane :workspace_tests do
        if !ENV["SKIP_SETUP"]
            setup
        end
        
        schemes = [
            "Ugglan",
            "hCore",
            "hCoreUI",
            "Forever",
            "Contracts",
            "Embark",
            "Home",
            "Payment"
        ]

        if ENV["SCHEME_FILTER"]
            schemes = schemes.filter { |scheme| scheme.include?(ENV["SCHEME_FILTER"]) }
        end
        
        def report(schemes)
            xchtmlreport(
                binary_path: "/opt/homebrew/bin/xchtmlreport",
                result_bundle_paths: schemes.map { |scheme| "fastlane/test_output/#{scheme}.xcresult" }.filter { |path| File.directory?(path) }
            )
        end
        
        device = "iPhone 12 Pro (15.0)"
        
        schemes.each { |scheme|
            begin
                if ENV["RECORD"] == "true"
                    scan(
                        workspace: "Ugglan.xcworkspace",
                        devices: [device],
                        scheme: scheme,
                        skip_package_dependencies_resolution: true,
                        xcargs: "OTHER_SWIFT_FLAGS='$(inherited) -D RECORD'"
                    )
                else
                    scan(
                        workspace: "Ugglan.xcworkspace",
                        devices: [device],
                        scheme: scheme,
                        skip_package_dependencies_resolution: true,
                        number_of_retries: 3
                    )
                end
            rescue => ex
                report(schemes)
                if ENV["RECORD"] != "true"
                    raise ex
                end
            end
        }
        
        report(schemes)
    end
end
