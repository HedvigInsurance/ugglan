# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
    lane :upload_dsyms_to_sentry do
        download_dsyms
        sentry_upload_dsym
        clean_build_artifacts
    end
    
    lane :setup do
        carthage(
            command: "bootstrap",
            cache_builds: true,
            platform: "ios"
        )
        
        sh("cd ..; tuist up")
        sh("cd ..; tuist generate")
    end
    
    lane :production_upload do |options|
        setup
        
        app_identifier = "com.hedvig.app"
        app_profile = "match AppStore com.hedvig.app"
        
        match(
            type: "appstore",
            app_identifier: app_identifier,
            readonly: is_ci,
            git_url: is_ci ? "https://hedvig-app-bot:#{ENV['MATCH_GITHUB_TOKEN']}@github.com/HedvigInsurance/ugglan-certificates.git" : nil
        )
        
        increment_build_number(
            build_number: app_store_build_number(app_identifier: app_identifier) + 1,
            xcodeproj: "Projects/App/Ugglan.xcodeproj"
        )
        
        increment_version_number(
            version_number: options[:version_number],
            xcodeproj: "Projects/App/Ugglan.xcodeproj"
        )
        
        update_project_provisioning(
            xcodeproj: "Projects/App/Ugglan.xcodeproj",
            profile: ENV["sigh_#{app_identifier}_appstore_profile-path"],
            target_filter: "Hedvig",
            build_configuration: "Release"
        )
        
        build_app(
            workspace: "Ugglan.xcworkspace",
            configuration: "Release",
            scheme: "Hedvig",
            derived_data_path: "gym-derived-data",
            output_directory: "fastlane/build_output",
            codesigning_identity: "Apple Distribution: Hedvig AB (AW656G5PFM)",
            export_options: {
                method: "appstore",
                iCloudContainerEnvironment: "Production",
                provisioningProfiles: {
                    app_identifier => app_profile
                }
            }
        )
        
        upload_to_app_store(
            force: true,
            submit_for_review: false,
            skip_screenshots: true,
            skip_metadata: true
        )
    end
    
    private_lane :send_slack_message do |options|
        require 'slack-notifier'
        
        notifier = Slack::Notifier.new options[:url], username: "iOS Bot"
        
        notifier.post(blocks: options[:blocks])
    end
    
    def ensure_temp_keychain(name)
      delete_keychain(
        name: name
      ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
      create_keychain(
        name: name,
        password: ENV["MATCH_KEYCHAIN_PASSWORD"],
        unlock: true,
        timeout: false
      )
    end
    
    lane :workspace_apps do
        setup
        
        apps = {
            "EmbarkExample" => {
                "identifier" => "com.hedvig.example.*",
                "project_path" => "Projects/Embark/Embark.xcodeproj"
            },
            "ForeverExample" => {
                "identifier" => "com.hedvig.example.*",
                "project_path" => "Projects/Forever/Forever.xcodeproj"
            },
            "HomeExample" => {
                "identifier" => "com.hedvig.example.*",
                "project_path" => "Projects/Home/Home.xcodeproj"
            },
            "hCoreUIExample" => {
                "identifier" => "com.hedvig.example.*",
                "project_path" => "Projects/hCoreUI/hCoreUI.xcodeproj"
            },
            "hCoreExample" => {
                "identifier" => "com.hedvig.example.*",
                "project_path" => "Projects/hCore/hCore.xcodeproj"
            },
            "ContractsExample" => {
                "identifier" => "com.hedvig.example.*",
                "project_path" => "Projects/Contracts/Contracts.xcodeproj"
            },
            "Ugglan" => {
                "identifier" => "com.hedvig.test.app",
                "project_path" => "Projects/App/Ugglan.xcodeproj"
            },
            "Hedvig" => {
                "identifier" => "com.hedvig.app",
                "project_path" => "Projects/App/Ugglan.xcodeproj"
            }
        }
        
        app_results = []
        
        if is_ci
            create_keychain(
                name: "CI",
                password: ENV["MATCH_PASSWORD"],
                default_keychain: true,
                unlock: true,
                timeout: 3600,
                lock_when_sleeps: false
            )
        end
        
        apps.each do |scheme, app|
            app_identifier = app["identifier"]

            match(
                type: "adhoc",
                app_identifier: app_identifier,
                readonly: is_ci,
                git_url: is_ci ? "https://hedvig-app-bot:#{ENV['MATCH_GITHUB_TOKEN']}@github.com/HedvigInsurance/ugglan-certificates.git" : nil,
                keychain_name: is_ci ? 'CI' : nil,
                keychain_password: is_ci ? ENV["MATCH_PASSWORD"] : nil
            )

            if is_ci
                sh("security list-keychains -d user")
                sh("security default-keychain -d user")
                sh("security find-identity -v -p codesigning CI")
            end
            
            app_profile = "match AdHoc #{app_identifier}"
            
            update_project_provisioning(
                xcodeproj: app["project_path"],
                profile: ENV["sigh_#{app_identifier}_adhoc_profile-path"],
                target_filter: scheme,
                build_configuration: "Release"
            )
                                    
            build_app(
                workspace: "Ugglan.xcworkspace",
                configuration: "Release",
                scheme: scheme,
                derived_data_path: "gym_derived_data",
                output_directory: "fastlane/build_output",
                codesigning_identity: "Apple Distribution: Hedvig AB (AW656G5PFM)",
                include_bitcode: false,
                export_options: {
                    compileBitcode: false,
                    iCloudContainerEnvironment: "Production",
                    method: "ad-hoc",
                    provisioningProfiles: {
                        app_identifier => app_profile
                    },
                    thinning: "<none>"
                }
            )
            
            require 'securerandom'
            
            aws_s3(
              access_key: ENV['S3_ACCESS_KEY'],
              secret_access_key: ENV['S3_SECRET_ACCESS_KEY'],
              bucket: "hedvig-ios-builds",
              region: "eu-central-1",
              ipa: "fastlane/build_output/#{scheme}.ipa",
              app_directory: "#{scheme}_#{SecureRandom.uuid}",
              path: 'v{CFBundleShortVersionString}_b{CFBundleVersion}/',
              upload_metadata: true,
            )
            
            app_results.append({
                url: lane_context[SharedValues::S3_HTML_OUTPUT_PATH],
                scheme: scheme
            })
        end
        
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "WorkspaceApps: ##{number_of_commits}",
                    "emoji": true
                }
            },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Branch*: #{git_branch}"
            }
          },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Message*: #{last_git_commit[:message]}"
            }
          },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Author*: #{last_git_commit[:author]}"
            }
          },
          {
            "type": "divider"
          },
          {
            "type": "actions",
            "elements": app_results.map { |app_result|
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": app_result[:scheme]
                    },
                    "url": app_result[:url],
                    "value": app_result[:scheme]
                }
            }
          },
          {
            "type": "divider"
          },
          {
            "type": "actions",
            "elements": [
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "Approve"
                    },
                    "style": "primary",
                    "value": "approve"
                },
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "emoji": true,
                        "text": "Decline"
                    },
                    "style": "danger",
                    "value": "decline"
                }
            ]
          },
          {
            "type": "divider"
          },
          {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "Request review from:"
            },
            "accessory": {
                "type": "users_select",
                "placeholder": {
                    "type": "plain_text",
                    "text": "Select a person",
                    "emoji": true
                }
            }
          },
        ]
        
        send_slack_message(url: git_branch == "master" ? ENV["SLACK_IOS_BUILDS_URL"] : ENV["SLACK_IOS_PR_BUILDS_URL"], blocks: blocks)
    end
    
    lane :workspace_tests do
        setup
        
        schemes = [
            "Ugglan",
            "hCore",
            "hCoreUI",
            "Embark",
            "Forever",
            "Contracts",
            "Home"
        ]
        
        def report(schemes)
            xchtmlreport(
                result_bundle_paths: schemes.map { |scheme| "fastlane/test_output/#{scheme}.xcresult" }.filter { |path| File.directory?(path) }
            )
        end
        
        schemes.each { |scheme|
            begin
                scan(
                    workspace: "Ugglan.xcworkspace",
                    devices: ["iPhone 11 Pro"],
                    scheme: scheme,
                    derived_data_path: "scan_derived_data"
                )
            rescue => ex
                report(schemes)
                raise ex
            end
        }
        
        report(schemes)
    end
end
