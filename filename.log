Building for production...
[0/4] Compiling clibc libc.c
remark: Incremental compilation has been disabled: it is not compatible with whole module optimizationremark: Incremental compilation has been disabled: it is not compatible with whole module optimization[1/6] Compiling atomic-counter.c
remark: Incremental compilation has been disabled: it is not compatible with whole module optimization[3/7] Compiling SPMLibc libc.swift
remark: Incremental compilation has been disabled: it is not compatible with whole module optimization[4/8] Compiling POSIX Error.swift
remark: Incremental compilation has been disabled: it is not compatible with whole module optimization[5/9] Compiling SwiftFormatConfiguration Configuration.swift
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/Sources/SwiftFormatConfiguration/Configuration.swift:162:14: warning: immutable property will not be decoded because it is declared with an initial value which cannot be overwritten
  public let ignoreSingleLineProperties = true
             ^
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/Sources/SwiftFormatConfiguration/Configuration.swift:162:14: note: set the initial value via the initializer or explicitly define a CodingKeys enum including a 'ignoreSingleLineProperties' case to silence this warning
  public let ignoreSingleLineProperties = true
             ^
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/Sources/SwiftFormatConfiguration/Configuration.swift:162:14: note: make the property mutable instead
  public let ignoreSingleLineProperties = true
         ~~~ ^
         var
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/Sources/SwiftFormatConfiguration/Configuration.swift:179:14: warning: immutable property will not be decoded because it is declared with an initial value which cannot be overwritten
  public let resolveAmbiguousColor: ResolveBehavior = .useUIColor
             ^
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/Sources/SwiftFormatConfiguration/Configuration.swift:179:14: note: set the initial value via the initializer or explicitly define a CodingKeys enum including a 'resolveAmbiguousColor' case to silence this warning
  public let resolveAmbiguousColor: ResolveBehavior = .useUIColor
             ^
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/Sources/SwiftFormatConfiguration/Configuration.swift:179:14: note: make the property mutable instead
  public let resolveAmbiguousColor: ResolveBehavior = .useUIColor
         ~~~ ^
         var
[6/9] Compiling Basic Await.swift
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/.build/checkouts/swift-package-manager/Sources/Basic/Await.swift:18:28: error: value of type '(@escaping (Result<T, ErrorType>) -> Void) -> Void' has no member 'dematerialize'
    return try await(body).dematerialize()
                    ~~~~~~ ^~~~~~~~~~~~~
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/.build/checkouts/swift-syntax/Sources/SwiftSyntax/RawSyntax.swift:120:46: error: value of type 'CSyntaxNode' (aka 'swiftparse_syntax_node_t') has no member 'range'
    let textSize = hasCustomText ? Int(cnode.range.length) : 0
                                       ~~~~~ ^~~~~
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/.build/checkouts/swift-syntax/Sources/SwiftSyntax/RawSyntax.swift:153:35: error: value of type 'CSyntaxNode' (aka 'swiftparse_syntax_node_t') has no member 'range'
      let startOffset = Int(cnode.range.offset)
                            ~~~~~ ^~~~~
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/.build/checkouts/swift-syntax/Sources/SwiftSyntax/RawSyntax.swift:157:55: error: value of type 'CSyntaxNode' (aka 'swiftparse_syntax_node_t') has no member 'range'
      let end = utf8.index(begin, offsetBy: Int(cnode.range.length))
                                                ~~~~~ ^~~~~
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/.build/checkouts/swift-syntax/Sources/SwiftSyntax/RawSyntax.swift:873:32: error: value of type 'CSyntaxNode' (aka 'swiftparse_syntax_node_t') has no member 'range'
    let byteLength = Int(cnode.range.length)
                         ~~~~~ ^~~~~
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/.build/checkouts/swift-syntax/Sources/SwiftSyntax/RawSyntax.swift:889:9: error: type of expression is ambiguous without more context
    raw.withUnsafeMutablePointers {
    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/sladannimcevic/Hedvig/ugglan/build/swift-format/.build/checkouts/swift-syntax/Sources/SwiftSyntax/SyntaxParser.swift:188:57: error: missing argument for parameter #3 in call
    let c_top = swiftparse_parse_string(c_parser, source)
                                                        ^
                                                        , <#Int#>
_InternalSwiftSyntaxParser.swiftparse_parse_string:1:13: note: 'swiftparse_parse_string' declared here
public func swiftparse_parse_string(_: swiftparse_parser_t!, _ source: UnsafePointer<CChar>!, _ len: Int) -> swiftparse_client_node_t!
            ^
