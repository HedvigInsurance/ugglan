// Generated automagically, don't edit yourself

{% if files %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set documentPrefix %}{{param.documentName|default:"Document"}}{% endset %}
import Foundation
{% macro fileBlock file %}
  {% if file.documents.count > 1 %}
  {% for document in file.documents %}
  {% set documentName %}{{documentPrefix}}{{forloop.counter}}{% endset %}
  {{accessModifier}} struct Translations {
    {% filter indent:2 %}{% call documentBlock file document %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call documentBlock file file.documents.first %}
  {% endif %}
{% endmacro %}
{% macro documentBlock file document %}
  {% set rootType %}{% call typeBlock document.metadata %}{% endset %}

enum Language {
{% for language in document.data["data"]["languages"] %}
case {{language["code"]}}
{% endfor %}
}

enum Key {
{% for key in document.data["data"]["keys"] %}
/// {{key.description}}
case {{key.value}}
{% endfor %}
}

struct Translations {
{% for language in document.data["data"]["languages"] %}

    struct {{language.code}} {
        static func `for`(key: Localization.Key) -> String {
            switch key {
                {% for translation in language.translations %}

                case .{{translation.key.value}}: return """
{% filter indent:16 %}
{{translation.text}}
{% endfilter %}
                """
                {% endfor %}
                default: return String(describing: key)
            }
        }
    }
{% endfor %}
}

{% endmacro %}
{% macro typeBlock metadata %}{% filter removeNewlines:"leading" %}
  {% if metadata.type == "Array" %}
    [{% call typeBlock metadata.element %}]
  {% elif metadata.type == "Dictionary" %}
    [String: Any]
  {% elif metadata.type == "Optional" %}
    Any?
  {% else %}
    {{metadata.type}}
  {% endif %}
{% endfilter %}{% endmacro %}

{% macro propertyBlock key metadata data %}{% filter removeNewlines:"leading" %}
  {% set propertyName %}{{key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endset %}
  {% set propertyType %}{% call typeBlock metadata %}{% endset %}
  static let {{propertyName}}: {{propertyType}} = {% call valueBlock data[key] metadata %}
{% endfilter %}{% endmacro %}
{% macro valueBlock value metadata %}{% filter removeNewlines:"leading" %}
  {% if metadata.type == "String" %}
    "{{ value }}"
  {% elif metadata.type == "Optional" %}
    nil
  {% elif metadata.type == "Array" and metadata.element.items %}
    [{% for itemMetadata in metadata.element.items %}
      {% call valueBlock value[forloop.counter0] itemMetadata %}
      {% if not forloop.last %}, {% endif %}
    {% endfor %}]
  {% elif metadata.type == "Dictionary" %}
    [{% for key,value in value %}
      "{{key}}": {% call valueBlock value metadata.properties[key] %}
      {% if not forloop.last %}, {% endif %}
    {% empty %}
      :
    {% endfor %}]
  {% else %}
    {{ value }}
  {% endif %}
{% endfilter %}{% endmacro %}

// swiftlint:disable identifier_name type_body_length type_name line_length nesting file_length
public struct Localization {
  {% call fileBlock files.first %}
}
// swiftlint:enable identifier_name type_body_length type_name line_length nesting file_length
{% else %}
// No files found
{% endif %}
